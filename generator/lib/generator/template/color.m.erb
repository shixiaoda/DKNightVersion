//
//  <%= klass.name %>+Night.m
//  <%= klass.name %>+Night
//
//  Copyright (c) 2015 Draveness. All rights reserved.
//
//  These files are generated by ruby script, if you want to modify code
//  in this file, you are supposed to update the ruby code, run it and
//  test it. And finally open a pull request.

#import "<%= klass.name %>+Night.h"
#import "DKNightVersionManager.h"
#import <objc/runtime.h>

@interface <%= klass.name %> ()

@property (nonatomic, strong) NSMutableDictionary<NSString *, DKPicker> *pickers;

@end

@implementation <%= klass.name %> (Night)

+ (void)load {
    SEL selectors[] = {
    <% klass.properties.each do |property| %><%= "@selector(set#{property.name.gsub(/\b\w/) { |w| w.upcase }}:),\n\t"%><% end %>
    };

    for (NSUInteger index = 0; index < sizeof(selectors) / sizeof(SEL); ++index) {
        SEL originalSelector = selectors[index];
        SEL swizzledSelector = NSSelectorFromString([@"sm_hook_" stringByAppendingString:NSStringFromSelector(originalSelector)]);
        Method originalMethod = class_getInstanceMethod(self, originalSelector);
        Method swizzledMethod = class_getInstanceMethod(self, swizzledSelector);
        method_exchangeImplementations(originalMethod, swizzledMethod);
    }
}

<% klass.properties.each do |property| %><%= """
- (void)sm_hook_set#{property.name.gsub(/\b\w/) { |w| w.upcase }}:(UIColor *)color {
    if  (!color)
    {
        return;
    }
    if (self.dk_#{property.name}Picker && self.dk_#{property.name}Picker() == color)
    {
        [self sm_hook_set#{property.name.gsub(/\b\w/) { |w| w.upcase }}:color];
    }
    else
    {
        self.dk_#{property.name}Picker = [DKColor defaultColorPicker:color];
    }
}
""" %><% end %>

<% klass.properties.each do |property| %><%= """
- (DKColorPicker)dk_#{property.name}Picker {
    return objc_getAssociatedObject(self, @selector(dk_#{property.name}Picker));
}

- (void)setDk_#{property.name}Picker:(DKColorPicker)picker {
    objc_setAssociatedObject(self, @selector(dk_#{property.name}Picker), picker, OBJC_ASSOCIATION_COPY_NONATOMIC);
    [self sm_hook_set#{property.name.gsub(/\b\w/) { |w| w.upcase }}:picker()];
    [self.pickers setValue:[picker copy] forKey:@\"#{property.setter}\"];
}
""" %><% end %>

@end
